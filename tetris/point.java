 package tetris;
 import java.io.*;
enum shapes
{
   I,O,Z,S,T,L,J
}

class point implements Serializable
{
 int [][][]a;
point(int f)
{
  shapes type=shapes.values()[f];

     if(type==shapes.I)
    {a=new int[][][]{
	                     {{1,1},{0,0},{-1,-1},{-2,-2}},
						 {{1,-1},{0,0},{-1,1},{-2,2}},
						 {{-1,-1},{0,0},{1,1},{2,2}},
						 {{-1,1},{0,0},{1,-1},{2,-2}}
						};
	}
	if(type==shapes.O)
	{a=new int[][][]{
	                     {{0,0},{0,0},{0,0},{00,0}},
						 {{0,0},{0,0},{0,0},{0,0}},
						 {{0,0},{0,0},{0,0},{0,0}},
						 {{0,0},{0,0},{0,0},{0,0}}
						};
     }
	 
     if(type==shapes.S)
    {a=new int[][][]{   //for S
						  {{1,1},{0,0},{1,-1},{0,-2}},
						  {{1,-1},{0,0},{-1,-1},{-2,0}},
						  {{-1,-1},{0,0},{-1,1},{0,2}},
						  {{-1,1},{0,0},{1,1},{2,0}}    
                        };	
    }
     if(type==shapes.Z)
    {a=new int[][][]{   //for Z
						  {{1,1},{0,0},{-1,1},{-2,0}},
						  {{1,-1},{0,0},{1,1},{0,2}},
						  {{-1,-1},{0,0},{1,-1},{2,0}},
						  {{-1,1},{0,0},{-1,-1},{0,-2}}    
                        };	
	}					
	if(type==shapes.T)
    {a=new int[][][]{   //for T
						  {{1,1},{0,0},{-1,-1},{-1,1}},
						  {{1,-1},{0,0},{-1,1},{1,1}},
						  {{-1,-1},{0,0},{1,1},{1,-1}},
						  {{-1,1},{0,0},{1,-1},{-1,-1}}    
                        };
	}
	
	if(type==shapes.L)
    {a=new int[][][]{   //for L
						  {{1,1},{0,0},{-1,-1},{0,-2}},
						  {{1,-1},{0,0},{-1,1},{-2,0}},
						  {{-1,-1},{0,0},{1,1},{0,2}},
						  {{-1,1},{0,0},{1,-1},{2,0}}    
                        };
	}
	
	if(type==shapes.J)
    {a=new int[][][]{   //for J
						  {{1,1},{0,0},{-1,-1},{-2,0}},
						  {{1,-1},{0,0},{-1,1},{0,2}},
						  {{-1,-1},{0,0},{1,1},{2,0}},
						  {{-1,1},{0,0},{1,-1},{0,-2}}    
                        };
	}


  }

  
}
	